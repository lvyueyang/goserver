// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/dal/model"
)

func newCaptcha(db *gorm.DB, opts ...gen.DOOption) captcha {
	_captcha := captcha{}

	_captcha.captchaDo.UseDB(db, opts...)
	_captcha.captchaDo.UseModel(&model.Captcha{})

	tableName := _captcha.captchaDo.TableName()
	_captcha.ALL = field.NewAsterisk(tableName)
	_captcha.ID = field.NewUint(tableName, "id")
	_captcha.CreatedAt = field.NewTime(tableName, "created_at")
	_captcha.UpdatedAt = field.NewTime(tableName, "updated_at")
	_captcha.Expiration = field.NewTime(tableName, "expiration")
	_captcha.Current = field.NewString(tableName, "current")
	_captcha.CurrentType = field.NewUint(tableName, "current_type")
	_captcha.Code = field.NewString(tableName, "code")
	_captcha.Status = field.NewUint(tableName, "status")
	_captcha.Scenes = field.NewUint(tableName, "scenes")

	_captcha.fillFieldMap()

	return _captcha
}

type captcha struct {
	captchaDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Expiration  field.Time
	Current     field.String
	CurrentType field.Uint
	Code        field.String
	Status      field.Uint
	Scenes      field.Uint

	fieldMap map[string]field.Expr
}

func (c captcha) Table(newTableName string) *captcha {
	c.captchaDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c captcha) As(alias string) *captcha {
	c.captchaDo.DO = *(c.captchaDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *captcha) updateTableName(table string) *captcha {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.Expiration = field.NewTime(table, "expiration")
	c.Current = field.NewString(table, "current")
	c.CurrentType = field.NewUint(table, "current_type")
	c.Code = field.NewString(table, "code")
	c.Status = field.NewUint(table, "status")
	c.Scenes = field.NewUint(table, "scenes")

	c.fillFieldMap()

	return c
}

func (c *captcha) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *captcha) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["expiration"] = c.Expiration
	c.fieldMap["current"] = c.Current
	c.fieldMap["current_type"] = c.CurrentType
	c.fieldMap["code"] = c.Code
	c.fieldMap["status"] = c.Status
	c.fieldMap["scenes"] = c.Scenes
}

func (c captcha) clone(db *gorm.DB) captcha {
	c.captchaDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c captcha) replaceDB(db *gorm.DB) captcha {
	c.captchaDo.ReplaceDB(db)
	return c
}

type captchaDo struct{ gen.DO }

type ICaptchaDo interface {
	gen.SubQuery
	Debug() ICaptchaDo
	WithContext(ctx context.Context) ICaptchaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICaptchaDo
	WriteDB() ICaptchaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICaptchaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICaptchaDo
	Not(conds ...gen.Condition) ICaptchaDo
	Or(conds ...gen.Condition) ICaptchaDo
	Select(conds ...field.Expr) ICaptchaDo
	Where(conds ...gen.Condition) ICaptchaDo
	Order(conds ...field.Expr) ICaptchaDo
	Distinct(cols ...field.Expr) ICaptchaDo
	Omit(cols ...field.Expr) ICaptchaDo
	Join(table schema.Tabler, on ...field.Expr) ICaptchaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICaptchaDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICaptchaDo
	Group(cols ...field.Expr) ICaptchaDo
	Having(conds ...gen.Condition) ICaptchaDo
	Limit(limit int) ICaptchaDo
	Offset(offset int) ICaptchaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICaptchaDo
	Unscoped() ICaptchaDo
	Create(values ...*model.Captcha) error
	CreateInBatches(values []*model.Captcha, batchSize int) error
	Save(values ...*model.Captcha) error
	First() (*model.Captcha, error)
	Take() (*model.Captcha, error)
	Last() (*model.Captcha, error)
	Find() ([]*model.Captcha, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Captcha, err error)
	FindInBatches(result *[]*model.Captcha, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Captcha) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICaptchaDo
	Assign(attrs ...field.AssignExpr) ICaptchaDo
	Joins(fields ...field.RelationField) ICaptchaDo
	Preload(fields ...field.RelationField) ICaptchaDo
	FirstOrInit() (*model.Captcha, error)
	FirstOrCreate() (*model.Captcha, error)
	FindByPage(offset int, limit int) (result []*model.Captcha, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICaptchaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindByID(id uint) (result *model.Captcha, err error)
}

// FindByID // 根据 ID 查询
//
// SELECT * FROM @@table WHERE id=@id
func (c captchaDo) FindByID(id uint) (result *model.Captcha, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM captcha WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c captchaDo) Debug() ICaptchaDo {
	return c.withDO(c.DO.Debug())
}

func (c captchaDo) WithContext(ctx context.Context) ICaptchaDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c captchaDo) ReadDB() ICaptchaDo {
	return c.Clauses(dbresolver.Read)
}

func (c captchaDo) WriteDB() ICaptchaDo {
	return c.Clauses(dbresolver.Write)
}

func (c captchaDo) Session(config *gorm.Session) ICaptchaDo {
	return c.withDO(c.DO.Session(config))
}

func (c captchaDo) Clauses(conds ...clause.Expression) ICaptchaDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c captchaDo) Returning(value interface{}, columns ...string) ICaptchaDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c captchaDo) Not(conds ...gen.Condition) ICaptchaDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c captchaDo) Or(conds ...gen.Condition) ICaptchaDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c captchaDo) Select(conds ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c captchaDo) Where(conds ...gen.Condition) ICaptchaDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c captchaDo) Order(conds ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c captchaDo) Distinct(cols ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c captchaDo) Omit(cols ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c captchaDo) Join(table schema.Tabler, on ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c captchaDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c captchaDo) RightJoin(table schema.Tabler, on ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c captchaDo) Group(cols ...field.Expr) ICaptchaDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c captchaDo) Having(conds ...gen.Condition) ICaptchaDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c captchaDo) Limit(limit int) ICaptchaDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c captchaDo) Offset(offset int) ICaptchaDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c captchaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICaptchaDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c captchaDo) Unscoped() ICaptchaDo {
	return c.withDO(c.DO.Unscoped())
}

func (c captchaDo) Create(values ...*model.Captcha) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c captchaDo) CreateInBatches(values []*model.Captcha, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c captchaDo) Save(values ...*model.Captcha) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c captchaDo) First() (*model.Captcha, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) Take() (*model.Captcha, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) Last() (*model.Captcha, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) Find() ([]*model.Captcha, error) {
	result, err := c.DO.Find()
	return result.([]*model.Captcha), err
}

func (c captchaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Captcha, err error) {
	buf := make([]*model.Captcha, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c captchaDo) FindInBatches(result *[]*model.Captcha, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c captchaDo) Attrs(attrs ...field.AssignExpr) ICaptchaDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c captchaDo) Assign(attrs ...field.AssignExpr) ICaptchaDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c captchaDo) Joins(fields ...field.RelationField) ICaptchaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c captchaDo) Preload(fields ...field.RelationField) ICaptchaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c captchaDo) FirstOrInit() (*model.Captcha, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) FirstOrCreate() (*model.Captcha, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) FindByPage(offset int, limit int) (result []*model.Captcha, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c captchaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c captchaDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c captchaDo) Delete(models ...*model.Captcha) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *captchaDo) withDO(do gen.Dao) *captchaDo {
	c.DO = *do.(*gen.DO)
	return c
}
